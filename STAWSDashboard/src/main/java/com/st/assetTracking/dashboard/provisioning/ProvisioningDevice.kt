package com.st.assetTracking.dashboard.provisioning

import android.content.Context
import android.content.Intent
import android.nfc.NfcAdapter
import android.nfc.Tag
import android.os.Build
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.*
import androidx.activity.viewModels
import androidx.annotation.RequiresApi
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.Observer
import com.google.android.material.button.MaterialButton
import com.st.assetTracking.dashboard.R
import com.st.assetTracking.dashboard.communication.aws.AwsAssetTrackingService
import com.st.assetTracking.dashboard.persistance.DeviceListRepository
import com.st.login.*
import com.st.login.loginprovider.LoginProviderFactory
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class ProvisioningDevice : AppCompatActivity(), NfcAdapter.ReaderCallback {

    private var mNfcAdapter: NfcAdapter? = null

    private lateinit var authData: AuthData

    private lateinit var deviceId : String
    private lateinit var deviceName : String
    private lateinit var deviceType : String
    private var deviceMacAddress: String? = null
    private var deviceEui: String? = null
    private var deviceProfile: String? = null
    private var boardID: String? = null
    private var firmwareID: String? = null

    private lateinit var ivStatusRegistration: ImageView
    private lateinit var tvStatusRegistration: TextView
    private lateinit var llStatusRegistration: LinearLayout
    private lateinit var viewProcessingRequest: View
    private lateinit var mCompleteButton : MaterialButton

    /**
     * shared vm used to decide what to display in this activity
     */
    private val mNavigator by viewModels<ProvisioningViewModel> {

        val deviceListRepository = DeviceListRepository(authData,
                AwsAssetTrackingService(authData, applicationContext)
        )

        deviceId = intent.getStringExtra(DEVICE_ID_EXTRA)
                ?: throw IllegalArgumentException("Missing Device ID parameters")
        deviceName = intent.getStringExtra(DEVICE_NAME_EXTRA)
                ?: throw IllegalArgumentException("Missing Device data parameters")
        deviceType = intent.getStringExtra(DEVICE_TYPE_EXTRA)
                ?: throw IllegalArgumentException("Missing Device type parameters")
        deviceMacAddress = intent.getStringExtra(DEVICE_MAC_EXTRA)
        deviceEui = intent.getStringExtra(DEVICE_EUI_EXTRA)
        deviceProfile = intent.getStringExtra(DEVICE_PROFILE_EXTRA)
        boardID = intent.getStringExtra(DEVICE_BOARD_ID_EXTRA)
        firmwareID = intent.getStringExtra(DEVICE_FIRMWARE_ID_EXTRA)

        ProvisioningViewModel.Factory(
            applicationContext,
            deviceId,
            deviceName,
            deviceType,
            deviceMacAddress,
            deviceEui,
            deviceProfile,
            boardID?.toInt(),
            firmwareID?.toInt(),
            deviceListRepository
        )

    }

    companion object {
        private val DEVICE_ID_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_ID_EXTRA"
        private val DEVICE_NAME_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_NAME_EXTRA"
        private val DEVICE_TYPE_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_TYPE_EXTRA"
        private val DEVICE_MAC_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_MAC_EXTRA"
        private val DEVICE_EUI_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_EUI_EXTRA"
        private val DEVICE_PROFILE_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_PROFILE_EXTRA"
        private val DEVICE_BOARD_ID_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_BOARD_ID_EXTRA"
        private val DEVICE_FIRMWARE_ID_EXTRA = ProvisioningDevice::class.java.name + ".DEVICE_FIRMWARE_ID_EXTRA"

        /**
         * start the activity to upload the [data] generated by the device with id [deviceId]
         */
        fun startActivityToProvisioningFrom(authData: AuthData, ctx: Context, deviceId: String, deviceName: String, deviceType: String, macAddress: String?, devEui: String?, deviceProfile: String?, boardID: Int? = null, firmwareID: Int? = null) {
            val intent = Intent(ctx, ProvisioningDevice::class.java)
            intent.putExtra(DEVICE_ID_EXTRA, deviceId)
            intent.putExtra(DEVICE_NAME_EXTRA, deviceName)
            intent.putExtra(DEVICE_TYPE_EXTRA, deviceType)
            intent.putExtra(DEVICE_PROFILE_EXTRA, deviceProfile)

            if(macAddress != null){
                intent.putExtra(DEVICE_MAC_EXTRA, macAddress)
            }

            if(devEui != null){
                intent.putExtra(DEVICE_EUI_EXTRA, devEui)
            }

            if(boardID != null && firmwareID != null){
                intent.putExtra(DEVICE_BOARD_ID_EXTRA, boardID.toString())
                intent.putExtra(DEVICE_FIRMWARE_ID_EXTRA, firmwareID.toString())
            }

            val mBundle = Bundle()
            mBundle.putString("accessKey", authData.accessKey)
            mBundle.putString("secretKey", authData.secretKey)
            mBundle.putString("token", authData.token)
            mBundle.putString("expiration", authData.expiration)

            intent.putExtra("AuthData", mBundle)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
            ctx.startActivity(intent)
        }

    }

    @RequiresApi(Build.VERSION_CODES.N)
    override fun onCreate(savedInstanceState: Bundle?) {

        mNfcAdapter = NfcAdapter.getDefaultAdapter(this)

        // Hide title bar
        try {
            this.supportActionBar!!.hide()
        } catch (e: NullPointerException) {}

        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_provisioning_device)

        authData = AuthData(intent.getBundleExtra("AuthData")?.getString("accessKey")!!,
                intent.getBundleExtra("AuthData")?.getString("secretKey")!!,
                intent.getBundleExtra("AuthData")?.getString("token")!!,
                intent.getBundleExtra("AuthData")?.getString("expiration")!!)

        viewProcessingRequest = findViewById(R.id.LoginProgress)
        llStatusRegistration = findViewById(R.id.layout_registration)
        ivStatusRegistration = findViewById(R.id.iv_registration_result)
        tvStatusRegistration = findViewById(R.id.tv_registration_result)
        mCompleteButton = findViewById(R.id.complete_registration)


        mCompleteButton.setOnClickListener{
            finish()
        }

        mNavigator.registrationStatus.observe(this, Observer { status ->
            when (status) {
                ProvisioningViewModel.RegistrationStatus.FAILED -> {
                    refreshUI()
                    ivStatusRegistration.setImageResource(R.drawable.ic_info)
                    tvStatusRegistration.text = "Device Registration FAILED."
                }
                ProvisioningViewModel.RegistrationStatus.COMPLETE -> {
                    ivStatusRegistration.setImageResource(R.drawable.ic_check)
                    tvStatusRegistration.text = "Device Registration COMPLETE."
                    checkCompleteProvisioningDevice(authData)
                }
                ProvisioningViewModel.RegistrationStatus.ALREADY_KNOWN -> {
                    refreshUI()
                    ivStatusRegistration.setImageResource(R.drawable.ic_info)
                    tvStatusRegistration.text = "Device Already Registered."
                }
                else -> { }
            }
        })
    }

    private fun refreshUI(){
        viewProcessingRequest.visibility = View.GONE
        llStatusRegistration.visibility = View.VISIBLE
        mCompleteButton.visibility = View.VISIBLE
    }

    /// onResume, onPause, onTagDiscovered used to ignore tag while provisioning Device process
    override fun onResume() {
        super.onResume()
        if (mNfcAdapter != null) {
            val options = Bundle()
            options.putInt(NfcAdapter.EXTRA_READER_PRESENCE_CHECK_DELAY, 250)

            // Enable ReaderMode for all types of card and disable platform sounds
            mNfcAdapter!!.enableReaderMode(
                this,
                this,
                NfcAdapter.FLAG_READER_NFC_A or
                        NfcAdapter.FLAG_READER_NFC_B or
                        NfcAdapter.FLAG_READER_NFC_F or
                        NfcAdapter.FLAG_READER_NFC_V or
                        NfcAdapter.FLAG_READER_NFC_BARCODE or
                        NfcAdapter.FLAG_READER_NO_PLATFORM_SOUNDS,
                options
            )
        }
    }

    override fun onPause() {
        super.onPause()
        if (mNfcAdapter != null) mNfcAdapter!!.disableReaderMode(this)
    }

    override fun onTagDiscovered(tag: Tag?) {
        print("discovered: $tag")
    }

    private fun checkCompleteProvisioningDevice(authData: AuthData){
        CoroutineScope(Dispatchers.Main).launch {
            val deviceListRepository = DeviceListRepository(
                authData,
                AwsAssetTrackingService(authData, applicationContext)
            )

            val device = deviceListRepository.getDeviceWithId(deviceId)

            if (device == null) {
                checkCompleteProvisioningDevice(authData)
            } else {
                Log.i("DEVICE_PROVISIONED", "$device")
                refreshUI()
            }
        }
    }
}
