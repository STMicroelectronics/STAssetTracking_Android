package com.st.assetTracking.dashboard

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentFactory
import androidx.lifecycle.Observer
import com.st.assetTracking.dashboard.deviceProfile.DeviceProfileViewModel
import com.st.assetTracking.dashboard.deviceProfile.DeviceProfileViewModel.Destination
import com.st.assetTracking.dashboard.deviceProfile.registerDevice.RegisterDeviceLoRaFragment
import com.st.assetTracking.dashboard.persistance.DeviceListRepository
import com.st.login.AuthData


/**
 * activity used to get Device Profile of a user and register device LoRa device on cloud dashboard.
 * this activity will close when the upload completes
 */
class AssetTrackingDeviceProfile : AppCompatActivity() {

    private lateinit var authData: AuthData

    /**
     * shared vm used to decide what to display in this activity
     */
    private val mNavigator by viewModels<DeviceProfileViewModel> {
        val deviceId = intent.getStringExtra(DEVICE_ID_EXTRA)
                ?: throw IllegalArgumentException("Missing Device ID parameters")
        val deviceType = intent.getStringExtra(DEVICE_TYPE_EXTRA)
                ?: throw IllegalArgumentException("Missing Device type parameters")
        DeviceProfileViewModel.Factory(
            deviceId,
            deviceType
        )
    }

    companion object {
        private val DEVICE_ID_EXTRA = AssetTrackingDeviceProfile::class.java.name + ".DEVICE_ID_EXTRA"
        private val DEVICE_TYPE_EXTRA = AssetTrackingDeviceProfile::class.java.name + ".DEVICE_TYPE_EXTRA"
        private val CREATE_DEVICE_FRAGMENT_TAG = AssetTrackingDeviceProfile::class.java.name + ".CREATE_DEVICE_FRAGMENT_TAG"

        /**
         * start the activity to upload the [data] generated by the device with id [deviceId]
         */
        fun startActivityDeviceProfileFrom(authData: AuthData, ctx: Context, deviceId: String, deviceType: String) {
            val intent = Intent(ctx, AssetTrackingDeviceProfile::class.java)
            intent.putExtra(DEVICE_ID_EXTRA, deviceId)
            intent.putExtra(DEVICE_TYPE_EXTRA, deviceType)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK

            val mBundle = Bundle()
            mBundle.putString("accessKey", authData.accessKey)
            mBundle.putString("secretKey", authData.secretKey)
            mBundle.putString("token", authData.token)
            mBundle.putString("expiration", authData.expiration)

            intent.putExtra("AuthData", mBundle)

            ctx.startActivity(intent)
        }

    }

    override fun onCreate(savedInstanceState: Bundle?) {

        authData = AuthData(intent.getBundleExtra("AuthData")?.getString("accessKey")!!,
                intent.getBundleExtra("AuthData")?.getString("secretKey")!!,
                intent.getBundleExtra("AuthData")?.getString("token")!!,
                intent.getBundleExtra("AuthData")?.getString("expiration")!!)

        supportFragmentManager.fragmentFactory = DeviceListFragmentFactory(
                deviceIdBuilder = { mNavigator.deviceId },
                //deviceTypeBuilder = { mNavigator.deviceType },
                deviceListBuilder = { mNavigator.deviceListRepository}
        )
        super.onCreate(savedInstanceState)

        setContentView(R.layout.asset_tracking_device_profile)

        mNavigator.currentView.observe(this, Observer { destination ->
            changeView(destination)
        })
    }

    private fun changeView(destinationView: Destination) {
        when (destinationView) {
            is Destination.Logined -> {
                mNavigator.onLoginComplete(authData, applicationContext)
            }
            is Destination.CreateDevice -> {
                showCreateDevicePage()
            }
            is Destination.GetDeviceProfileComplete -> {

                Toast.makeText(this,
                        "LoRa device registration complete",
                        Toast.LENGTH_SHORT)
                        .show()
                //close the activity
                finish()
            }
        }
    }


    private fun showCreateDevicePage() {
        val fm = supportFragmentManager
        var fragment = fm.findFragmentByTag(CREATE_DEVICE_FRAGMENT_TAG)
        if (fragment == null) {
            fragment = supportFragmentManager.fragmentFactory.instantiate(classLoader, RegisterDeviceLoRaFragment::class.java.name)
            supportFragmentManager.beginTransaction()
                    .replace(R.id.assetTracker_device_profile_rootView, fragment, CREATE_DEVICE_FRAGMENT_TAG)
                    .commit()
        }
    }


    internal class DeviceListFragmentFactory(

            private val deviceIdBuilder: () -> String,
            private val deviceListBuilder: () -> DeviceListRepository?) : FragmentFactory() {

        override fun instantiate(classLoader: ClassLoader, className: String): Fragment {
            return when (className) {
                RegisterDeviceLoRaFragment::class.java.name -> {
                    val deviceListRepository = deviceListBuilder()!!
                    val deviceId = deviceIdBuilder()
                    RegisterDeviceLoRaFragment(deviceId, deviceListRepository)
                }
                else -> super.instantiate(classLoader, className)
            }
        }
    }

}