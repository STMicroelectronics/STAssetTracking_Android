package com.st.assetTracking.dashboard.uploadData.uploader

import android.content.Context
import android.content.Intent
import android.nfc.NfcAdapter
import android.nfc.Tag
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.activity.viewModels
import androidx.lifecycle.Observer
import com.st.assetTracking.dashboard.R
import com.st.assetTracking.dashboard.communication.aws.AwsAssetTrackingService
import com.st.assetTracking.dashboard.persistance.DeviceListRepository
import com.st.assetTracking.dashboard.util.LocationService
import com.st.assetTracking.data.GenericDSHSample
import com.st.login.AuthData

class UploaderGenericDataActivity : AppCompatActivity(), NfcAdapter.ReaderCallback {

    private var mNfcAdapter: NfcAdapter? = null

    private lateinit var authData: AuthData

    private lateinit var deviceId : String
    private lateinit var deviceType : String

    private lateinit var ivStatusRegistration: ImageView
    private lateinit var tvStatusRegistration: TextView
    private lateinit var llStatusRegistration: LinearLayout
    private lateinit var viewProcessingRequest: View

    private val mUploaderViewModel by viewModels<UploaderGenericDataViewModel> {
        deviceId = intent.getStringExtra(DEVICE_ID_EXTRA)
            ?: throw IllegalArgumentException("Missing Device ID parameters")
        val data = intent.getParcelableArrayListExtra<GenericDSHSample>(DEVICE_DATA_EXTRA)
            ?: throw IllegalArgumentException("Missing Device data parameters")
        val technology = intent.getStringExtra(DEVICE_TYPE_EXTRA)
            ?: throw IllegalArgumentException("Missing Device type parameters")
        deviceType = intent.getStringExtra(DEVICE_TYPE_EXTRA)
            ?: throw IllegalArgumentException("Missing Device type parameters")

        val locationService = LocationService(applicationContext)
        val deviceListRepository = DeviceListRepository(authData, AwsAssetTrackingService(authData, applicationContext))
        val deviceManager = deviceListRepository.buildRemoteDeviceManagerFor(applicationContext, deviceId)

        UploaderGenericDataViewModel.Factory(
            applicationContext,
            deviceId,
            technology,
            data,
            locationService,
            deviceManager,
            deviceListRepository
        )

    }

    companion object {
        private val DEVICE_ID_EXTRA = UploaderGenericDataActivity::class.java.name + ".DEVICE_ID_EXTRA"
        private val DEVICE_TYPE_EXTRA = UploaderGenericDataActivity::class.java.name + ".DEVICE_TYPE_EXTRA"
        private val DEVICE_TECHNOLOGY_EXTRA = UploaderGenericDataActivity::class.java.name + ".DEVICE_TECHNOLOGY_EXTRA"
        private val DEVICE_DATA_EXTRA = UploaderGenericDataActivity::class.java.name + ".DEVICE_DATA_EXTRA"

        /** start the activity to upload the [data] generated by the device with id [deviceId] */
        fun startActivityToUploadGenericData(authData: AuthData, ctx: Context, deviceId: String, data: List<GenericDSHSample>, technology: String, deviceType: String) {
            val intent = Intent(ctx, UploaderGenericDataActivity::class.java)
            intent.putExtra(DEVICE_ID_EXTRA, deviceId)
            intent.putExtra(DEVICE_TECHNOLOGY_EXTRA, technology)
            intent.putExtra(DEVICE_TYPE_EXTRA, deviceType)
            intent.putParcelableArrayListExtra(DEVICE_DATA_EXTRA, ArrayList(data))

            val mBundle = Bundle()
            mBundle.putString("accessKey", authData.accessKey)
            mBundle.putString("secretKey", authData.secretKey)
            mBundle.putString("token", authData.token)
            mBundle.putString("expiration", authData.expiration)

            intent.putExtra("AuthData", mBundle)
            intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK
            ctx.startActivity(intent)
        }

    }

    override fun onCreate(savedInstanceState: Bundle?) {
        mNfcAdapter = NfcAdapter.getDefaultAdapter(this)

        /* Hide title bar */
        try { this.supportActionBar!!.hide() } catch (e: NullPointerException) { Log.d("Tile", e.toString()) }

        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_uploader_generic_data)

        authData = AuthData(intent.getBundleExtra("AuthData")?.getString("accessKey")!!,
            intent.getBundleExtra("AuthData")?.getString("secretKey")!!,
            intent.getBundleExtra("AuthData")?.getString("token")!!,
            intent.getBundleExtra("AuthData")?.getString("expiration")!!)

        viewProcessingRequest = findViewById(R.id.generic_uploader_progress)
        llStatusRegistration = findViewById(R.id.generic_uploader_layout_registration)
        ivStatusRegistration = findViewById(R.id.iv_generic_uploader_registration_result)
        tvStatusRegistration = findViewById(R.id.tv_generic_uploader_registration_result)

        mUploaderViewModel.genericUploadStatus.observe(this, Observer { status ->
            when (status) {
                UploaderGenericDataViewModel.GenericUploadStatus.FAILED -> {

                    ivStatusRegistration.setImageResource(R.drawable.ic_info)
                    tvStatusRegistration.text = "Cloud Sync FAILED."
                    cloudSyncFailed()
                }
                UploaderGenericDataViewModel.GenericUploadStatus.COMPLETE -> {
                    ivStatusRegistration.setImageResource(R.drawable.ic_check)
                    tvStatusRegistration.text = "Cloud Sync DONE."
                    cloudSyncCompleted()
                }
                else -> { }
            }
        })
    }

    /* onResume, onPause, onTagDiscovered used to ignore tag while provisioning Device process */
    override fun onResume() {
        super.onResume()
        if (mNfcAdapter != null) {
            val options = Bundle()
            options.putInt(NfcAdapter.EXTRA_READER_PRESENCE_CHECK_DELAY, 250)

            // Enable ReaderMode for all types of card and disable platform sounds
            mNfcAdapter!!.enableReaderMode(
                this,
                this,
                NfcAdapter.FLAG_READER_NFC_A or
                        NfcAdapter.FLAG_READER_NFC_B or
                        NfcAdapter.FLAG_READER_NFC_F or
                        NfcAdapter.FLAG_READER_NFC_V or
                        NfcAdapter.FLAG_READER_NFC_BARCODE or
                        NfcAdapter.FLAG_READER_NO_PLATFORM_SOUNDS,
                options
            )
        }
    }

    override fun onPause() {
        super.onPause()
        if (mNfcAdapter != null) mNfcAdapter!!.disableReaderMode(this)
    }

    override fun onTagDiscovered(tag: Tag?) {
        print("discovered: $tag")
    }

    private fun cloudSyncCompleted(){
        Toast.makeText(applicationContext, "Cloud Sync DONE.", Toast.LENGTH_LONG).show()
        finish()
    }

    private fun cloudSyncFailed(){
        Toast.makeText(applicationContext, "Cloud Sync FAILED.", Toast.LENGTH_LONG).show()
        finish()
    }
}