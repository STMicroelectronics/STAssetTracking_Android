package com.st.assetTracking.dashboard

import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.nfc.NfcAdapter
import android.os.Bundle
import android.widget.Toast
import androidx.activity.viewModels
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentFactory
import androidx.lifecycle.Observer
import com.st.assetTracking.dashboard.communication.DeviceManager
import com.st.assetTracking.dashboard.persistance.DeviceListRepository
import com.st.assetTracking.dashboard.uploadData.UploadDataNavigatorViewModel
import com.st.assetTracking.dashboard.uploadData.UploadDataNavigatorViewModel.Destination
import com.st.assetTracking.dashboard.uploadData.UploadDataNavigatorViewModel.Factory
import com.st.assetTracking.dashboard.uploadData.registerDevice.RegisterDeviceFragment
import com.st.assetTracking.dashboard.uploadData.uploader.UploaderFragment
import com.st.assetTracking.dashboard.util.LocationService
import com.st.assetTracking.data.DataSample
import com.st.login.AuthData
import java.lang.Exception


/**
 * activity used to upload the data of a specific device to the cloud
 * this activity will close when the upload completes
 */
class AssetTrackingUploadData : AppCompatActivity() {

    private lateinit var authData: AuthData

    /**
     * shared vm used to decide what to display in this activity
     */
    private val mNavigator by viewModels<UploadDataNavigatorViewModel> {
        val deviceId = intent.getStringExtra(DEVICE_ID_EXTRA)
                ?: throw IllegalArgumentException("Missing Device ID parameters")
        val deviceData = intent.getParcelableArrayListExtra<DataSample>(DEVICE_DATA_EXTRA)
                ?: throw IllegalArgumentException("Missing Device data parameters")
        val deviceType = intent.getStringExtra(DEVICE_TYPE_EXTRA)
                ?: throw IllegalArgumentException("Missing Device type parameters")
        val deviceTechnology = intent.getStringExtra(DEVICE_TECHNOLOGY_EXTRA)
            ?: throw IllegalArgumentException("Missing Device technology parameters")
        Factory(
            deviceId,
            deviceData,
            deviceType,
            deviceTechnology
        )
    }

    companion object {
        private val DEVICE_ID_EXTRA = AssetTrackingUploadData::class.java.name + ".DEVICE_ID_EXTRA"
        private val DEVICE_DATA_EXTRA = AssetTrackingUploadData::class.java.name + ".DEVICE_DATA_EXTRA"
        private val DEVICE_TYPE_EXTRA = AssetTrackingUploadData::class.java.name + ".DEVICE_TYPE_EXTRA"
        private val DEVICE_TECHNOLOGY_EXTRA = AssetTrackingUploadData::class.java.name + ".DEVICE_TYPE_EXTRA"
        private val UPLOAD_DATA_FRAGMENT_TAG = AssetTrackingUploadData::class.java.name + ".UPLOAD_DATA_FRAGMENT_TAG"
        private val CREATE_DEVICE_FRAGMENT_TAG = AssetTrackingUploadData::class.java.name + ".CREATE_DEVICE_FRAGMENT_TAG"

        /**
         * start the activity to upload the [data] generated by the device with id [deviceId]
         */
        fun startActivityToUploadDataFrom(authData: AuthData, ctx: Context, deviceId: String, technology: String, data: List<DataSample>, deviceType: String) {
            val intent = Intent(ctx, AssetTrackingUploadData::class.java)
            intent.putExtra(DEVICE_ID_EXTRA, deviceId)
            intent.putExtra(DEVICE_TYPE_EXTRA, deviceType)
            intent.putExtra(DEVICE_TECHNOLOGY_EXTRA, technology)
            intent.putParcelableArrayListExtra(DEVICE_DATA_EXTRA, ArrayList(data))

            val mBundle = Bundle()
            mBundle.putString("accessKey", authData.accessKey)
            mBundle.putString("secretKey", authData.secretKey)
            mBundle.putString("token", authData.token)
            mBundle.putString("expiration", authData.expiration)

            intent.putExtra("AuthData", mBundle)
            ctx.startActivity(intent)
        }

    }

    override fun onCreate(savedInstanceState: Bundle?) {

        authData = AuthData(intent.getBundleExtra("AuthData")?.getString("accessKey")!!,
                intent.getBundleExtra("AuthData")?.getString("secretKey")!!,
                intent.getBundleExtra("AuthData")?.getString("token")!!,
                intent.getBundleExtra("AuthData")?.getString("expiration")!!)

        supportFragmentManager.fragmentFactory = DeviceListFragmentFactory(
                locationService = LocationService(applicationContext),
                deviceIdBuilder = { mNavigator.deviceId },
                deviceTypeBuilder = { mNavigator.deviceType },
                deviceListBuilder = { mNavigator.deviceListRepository },
                deviceManagerBuilder = { mNavigator.deviceManager },
                technology = mNavigator.deviceTechnology,
                deviceData = mNavigator.deviceData
        )
        super.onCreate(savedInstanceState)

        setContentView(R.layout.activity_asset_tracking_upload_data)

        mNavigator.currentView.observe(this, Observer { destination ->
            changeView(destination)
        })
    }

    private fun changeView(destinationView: Destination) {
        when (destinationView) {
            is Destination.Logined -> {
                mNavigator.onLoginComplete(authData, applicationContext)
            }
            is Destination.CreateDevice -> {
                showCreateDevicePage()
            }
            is Destination.UploadDeviceData -> {
                showUploadDataPage()
            }
            is Destination.UploadCompleted -> {

                Toast.makeText(this,
                        getString(R.string.uploadData_completeMessage),
                        Toast.LENGTH_SHORT)
                        .show()
                //close the activity
                finish()
            }
        }
    }

    private fun showCreateDevicePage() {
        val fm = supportFragmentManager
        var fragment = fm.findFragmentByTag(CREATE_DEVICE_FRAGMENT_TAG)
        if (fragment == null) {
            fragment = supportFragmentManager.fragmentFactory.instantiate(classLoader, RegisterDeviceFragment::class.java.name)
            supportFragmentManager.beginTransaction()
                    .replace(R.id.assetTracker_upload_rootView, fragment, CREATE_DEVICE_FRAGMENT_TAG)
                    .commit()
        }
    }


    private fun showUploadDataPage() {
        val fm = supportFragmentManager
        var fragment = fm.findFragmentByTag(UPLOAD_DATA_FRAGMENT_TAG)
        if (fragment == null) {
            fragment = supportFragmentManager.fragmentFactory.instantiate(classLoader, UploaderFragment::class.java.name)
            supportFragmentManager.beginTransaction()
                    .replace(R.id.assetTracker_upload_rootView, fragment, UPLOAD_DATA_FRAGMENT_TAG)
                    .commit()
        }
    }


    internal class DeviceListFragmentFactory(
            private val locationService: LocationService,
            private val deviceIdBuilder: () -> String,
            private val deviceTypeBuilder: () -> String,
            private val deviceListBuilder: () -> DeviceListRepository?,
            private val deviceManagerBuilder: () -> DeviceManager?,
            private val technology: String,
            private val deviceData: List<DataSample>) : FragmentFactory() {

        override fun instantiate(classLoader: ClassLoader, className: String): Fragment {
            return when (className) {
                UploaderFragment::class.java.name -> {
                    //if deviceListManager is null the deviceListFragment should not be construct
                    //we are trying to display the wrong fragment
                    val deviceId = deviceIdBuilder()
                    val deviceManager = deviceManagerBuilder()!!
                    UploaderFragment(deviceId, locationService, deviceManager, technology, deviceData)
                }
                RegisterDeviceFragment::class.java.name -> {
                    val deviceListRepository = deviceListBuilder()!!
                    val deviceId = deviceIdBuilder()
                    val deviceType = deviceTypeBuilder()
                    RegisterDeviceFragment(deviceId, deviceListRepository, deviceType)
                }
                else -> super.instantiate(classLoader, className)
            }
        }
    }

    override fun onPause() {
        super.onPause()
        val nfcAdapter = NfcAdapter.getDefaultAdapter(this)
        try{nfcAdapter.disableForegroundDispatch(this)}catch (e: Exception){}
    }

    override fun onResume() {
        super.onResume()
        val nfcAdapter = NfcAdapter.getDefaultAdapter(this)
        val pendingIntent = PendingIntent.getActivity(this, 0, Intent(this, javaClass).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), PendingIntent.FLAG_IMMUTABLE)
        try{nfcAdapter.enableForegroundDispatch(this, pendingIntent, null, null)}catch (e: Exception){}
    }

    override fun onNewIntent(intent: Intent) {
        super.onNewIntent(intent)
        if (NfcAdapter.ACTION_TAG_DISCOVERED == intent.action) {
            // drop NFC events
        }
    }

}